// <auto-generated />
using System;
using MEL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MEL.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190827051739_CreateApplicationSchema")]
    partial class CreateApplicationSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MEL.Entities.Core.EducationAdministrator", b =>
                {
                    b.Property<Guid>("ParticipantId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int?>("RefEducationAdministratorOfficeId");

                    b.Property<int?>("RefEducationAdministratorPositionId");

                    b.Property<int?>("RefEducationAdministratorTypeId");

                    b.HasKey("ParticipantId");

                    b.HasIndex("RefEducationAdministratorOfficeId");

                    b.HasIndex("RefEducationAdministratorPositionId");

                    b.HasIndex("RefEducationAdministratorTypeId");

                    b.ToTable("EducationAdministrator");
                });

            modelBuilder.Entity("MEL.Entities.Core.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(384);

                    b.Property<string>("Contact")
                        .HasMaxLength(150);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOrganizationUnit");

                    b.Property<bool?>("IsTenant");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("OrganizationCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid?>("ParentOrganizationId");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("RefLocationId");

                    b.Property<int>("RefOrganizationTypeId");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("OrganizationId");

                    b.HasIndex("ParentOrganizationId");

                    b.HasIndex("RefLocationId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MEL.Entities.Core.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(384);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(320);

                    b.Property<string>("Facebook")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("InstantMessenger")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(35);

                    b.Property<string>("Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired();

                    b.Property<string>("ParticipantCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("RefLocationId");

                    b.Property<int>("RefParticipantTypeId");

                    b.Property<int>("RefSexId");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("ParticipantId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RefLocationId");

                    b.HasIndex("RefParticipantTypeId");

                    b.HasIndex("RefSexId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("MEL.Entities.Core.Partner", b =>
                {
                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("Contact")
                        .HasMaxLength(150);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PartnerCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RefPartnerSectorId");

                    b.Property<int?>("RefPartnerTypeId");

                    b.HasKey("OrganizationId");

                    b.HasIndex("RefPartnerSectorId");

                    b.HasIndex("RefPartnerTypeId");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("MEL.Entities.Core.School", b =>
                {
                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("HeadTeacher")
                        .HasMaxLength(150);

                    b.Property<bool?>("IsClusterCenter");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid?>("PartnerId");

                    b.Property<int?>("RefSchoolAdministrationTypeId");

                    b.Property<int?>("RefSchoolClusterId");

                    b.Property<int?>("RefSchoolLocationId");

                    b.Property<int?>("RefSchoolStatusId");

                    b.Property<int?>("RefSchoolTypeId");

                    b.Property<string>("SchoolCode")
                        .HasMaxLength(100);

                    b.HasKey("OrganizationId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RefSchoolAdministrationTypeId");

                    b.HasIndex("RefSchoolClusterId");

                    b.HasIndex("RefSchoolLocationId");

                    b.HasIndex("RefSchoolStatusId");

                    b.HasIndex("RefSchoolTypeId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("MEL.Entities.Core.SchoolEnrollment", b =>
                {
                    b.Property<Guid>("SchoolEnrollmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<int?>("DisabledFemale");

                    b.Property<int?>("DisabledMale");

                    b.Property<int?>("Female");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Male");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid?>("OrganizationId");

                    b.Property<int>("RefParticipantTypeId");

                    b.Property<int>("RefSchoolGradeLevelId");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("SchoolPeriodId");

                    b.HasKey("SchoolEnrollmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RefParticipantTypeId");

                    b.HasIndex("RefSchoolGradeLevelId");

                    b.HasIndex("SchoolPeriodId");

                    b.ToTable("SchoolEnrollment");
                });

            modelBuilder.Entity("MEL.Entities.Core.SchoolPeriod", b =>
                {
                    b.Property<int>("SchoolPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("SchoolPeriodId");

                    b.ToTable("SchoolPeriod");
                });

            modelBuilder.Entity("MEL.Entities.Core.Student", b =>
                {
                    b.Property<Guid>("ParticipantId");

                    b.Property<int?>("Age");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool?>("Disability");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ParentGuardian")
                        .HasMaxLength(255);

                    b.Property<int?>("RefStudentDisabilityTypeId");

                    b.Property<int?>("RefStudentSpecializationId");

                    b.Property<int?>("RefStudentTypeId");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(100);

                    b.HasKey("ParticipantId");

                    b.HasIndex("RefStudentDisabilityTypeId");

                    b.HasIndex("RefStudentSpecializationId");

                    b.HasIndex("RefStudentTypeId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("MEL.Entities.Core.Teacher", b =>
                {
                    b.Property<Guid>("ParticipantId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("GradeLevels")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int?>("RefTeacherPositionId");

                    b.Property<int?>("RefTeacherTypeId");

                    b.HasKey("ParticipantId");

                    b.HasIndex("RefTeacherPositionId");

                    b.HasIndex("RefTeacherTypeId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("MEL.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MEL.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(70);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(70);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("OrganizationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MEL.Entities.Programs.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Closed");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<string>("FileName");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid?>("ParticipantId");

                    b.Property<int>("ProgramId");

                    b.Property<int?>("RefGradeLevelId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Url");

                    b.HasKey("GroupId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RefGradeLevelId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("MEL.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Property<Guid>("GroupEnrollmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Attendance");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTime?>("EnrollmentDate");

                    b.Property<Guid?>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("ParticipantId");

                    b.Property<int?>("RefEnrollmentStatusId");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("GroupEnrollmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RefEnrollmentStatusId");

                    b.ToTable("GroupEnrollment");
                });

            modelBuilder.Entity("MEL.Entities.Programs.GroupEvaluation", b =>
                {
                    b.Property<Guid>("GroupEvaluationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTime?>("EvaluationDate");

                    b.Property<Guid>("GroupEnrollmentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int?>("ProgramAssessmentId");

                    b.Property<int?>("RefEvaluationStatusId");

                    b.Property<int?>("Score");

                    b.Property<DateTime?>("StatusDate");

                    b.HasKey("GroupEvaluationId");

                    b.HasIndex("GroupEnrollmentId");

                    b.HasIndex("ProgramAssessmentId");

                    b.HasIndex("RefEvaluationStatusId");

                    b.ToTable("GroupEvaluation");
                });

            modelBuilder.Entity("MEL.Entities.Programs.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("DisplayMarks");

                    b.Property<bool>("HasAssessment");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Max");

                    b.Property<int?>("Min");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("RefAttendanceUnitId");

                    b.Property<int?>("RefOrganizationTypeId");

                    b.Property<int?>("RefProgramTypeId");

                    b.HasKey("ProgramId");

                    b.HasIndex("RefAttendanceUnitId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.HasIndex("RefProgramTypeId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("MEL.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Property<int>("ProgramAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("CompletionScore");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("Max");

                    b.Property<int?>("MaximumScore");

                    b.Property<int?>("Min");

                    b.Property<int?>("MinimumScore");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("ProgramId");

                    b.Property<int?>("RefAssessmentTypeId")
                        .IsRequired();

                    b.Property<int?>("RefAttendanceUnitId");

                    b.Property<int?>("RefEvaluationStatusId");

                    b.Property<bool>("TrackAttendance");

                    b.HasKey("ProgramAssessmentId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RefAssessmentTypeId");

                    b.HasIndex("RefAttendanceUnitId");

                    b.HasIndex("RefEvaluationStatusId");

                    b.ToTable("ProgramAssessment");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefAssessmentType", b =>
                {
                    b.Property<int>("RefAssessmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("AssessmentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefAssessmentTypeId");

                    b.ToTable("RefAssessmentType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefAttendanceUnit", b =>
                {
                    b.Property<int>("RefAttendanceUnitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttendanceUnit")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("AttendanceUnitCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("AttendanceUnitId")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("RefAttendanceUnitId");

                    b.ToTable("RefAttendanceUnit");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefEducationAdministratorOffice", b =>
                {
                    b.Property<int>("RefEducationAdministratorOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationAdministratorOffice")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("EducationAdministratorOfficeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefEducationAdministratorOfficeId");

                    b.ToTable("RefEducationAdministratorOffice");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefEducationAdministratorPosition", b =>
                {
                    b.Property<int>("RefEducationAdministratorPositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationAdministratorPosition")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("RefEducationAdministratorPositionCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefEducationAdministratorPositionId");

                    b.ToTable("RefEducationAdministratorPosition");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefEducationAdministratorType", b =>
                {
                    b.Property<int>("RefEducationAdministratorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationAdministratorType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("EducationAdministratorTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefEducationAdministratorTypeId");

                    b.ToTable("RefEducationAdministratorType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefEnrollmentStatus", b =>
                {
                    b.Property<int>("EnrollmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("EnrollmentStatusCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("EnrollmentStatusId");

                    b.ToTable("RefEnrollmentStatus");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefEvaluationStatus", b =>
                {
                    b.Property<int>("EvaluationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EvaluationStatus")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("EvaluationStatusCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("EvaluationStatusId");

                    b.ToTable("RefEvaluationStatus");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Property<int>("RefGradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("GradeLevelCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("GradeLevelId")
                        .HasMaxLength(10);

                    b.HasKey("RefGradeLevelId");

                    b.ToTable("RefGradeLevel");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefLocation", b =>
                {
                    b.Property<string>("RefLocationId")
                        .HasMaxLength(25);

                    b.Property<double?>("Latitude");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double?>("Longitude");

                    b.Property<string>("ParentLocationId");

                    b.Property<int>("RefLocationTypeId");

                    b.HasKey("RefLocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("RefLocationTypeId");

                    b.ToTable("RefLocation");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefLocationType", b =>
                {
                    b.Property<int>("RefLocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationLevel");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("LocationTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefLocationTypeId");

                    b.ToTable("RefLocationType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Property<int>("RefOrganizationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("OrganizationTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefOrganizationTypeId");

                    b.ToTable("RefOrganizationType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefParticipantType", b =>
                {
                    b.Property<int>("RefParticipantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ParticipantTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefParticipantTypeId");

                    b.ToTable("RefParticipantType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefPartnerSector", b =>
                {
                    b.Property<int>("RefPartnerSectorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartnerSector")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("PartnerSectorCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefPartnerSectorId");

                    b.ToTable("RefPartnerSector");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefPartnerType", b =>
                {
                    b.Property<int>("RefPartnerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PartnerType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("PartnerTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefPartnerTypeId");

                    b.ToTable("RefPartnerType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefProgramType", b =>
                {
                    b.Property<int>("RefProgramTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProgramType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ProgramTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefProgramTypeId");

                    b.ToTable("RefProgramType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSchoolAdministrationType", b =>
                {
                    b.Property<int>("RefSchoolAdministrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchoolAdministrationType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("SchoolAdministrationTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefSchoolAdministrationTypeId");

                    b.ToTable("RefSchoolAdministrationType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSchoolCluster", b =>
                {
                    b.Property<int>("RefSchoolClusterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefLocationId");

                    b.Property<string>("SchoolCluster")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("SchoolClusterCode")
                        .HasMaxLength(25);

                    b.HasKey("RefSchoolClusterId");

                    b.HasIndex("RefLocationId");

                    b.ToTable("RefSchoolCluster");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSchoolLocation", b =>
                {
                    b.Property<int>("RefSchoolLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchoolLocation")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("SchoolLocationCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefSchoolLocationId");

                    b.ToTable("RefSchoolLocation");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSchoolStatus", b =>
                {
                    b.Property<int>("RefSchoolStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchoolStatus")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("SchoolStatusCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefSchoolStatusId");

                    b.ToTable("RefSchoolStatus");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSchoolType", b =>
                {
                    b.Property<int>("RefSchoolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchoolType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("SchoolTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefSchoolTypeId");

                    b.ToTable("RefSchoolType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSex", b =>
                {
                    b.Property<int>("RefSexId");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SexId")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("RefSexId");

                    b.ToTable("RefSex");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefStudentDisabilityType", b =>
                {
                    b.Property<int>("RefStudentDisabilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisabilityType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("DisabilityTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefStudentDisabilityTypeId");

                    b.ToTable("RefStudentDisabilityType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefStudentSpecialization", b =>
                {
                    b.Property<int>("RefStudentSpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudentSpecialization")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StudentSpecializationCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefStudentSpecializationId");

                    b.ToTable("RefStudentSpecialization");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefStudentType", b =>
                {
                    b.Property<int>("RefStudentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudentType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("StudentTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefStudentTypeId");

                    b.ToTable("RefStudentType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTLMDistributionStatus", b =>
                {
                    b.Property<int>("RefTLMDistributionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistributionStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TLMDistributionStatusCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTLMDistributionStatusId");

                    b.ToTable("RefTLMDistributionStatus");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTLMGroup", b =>
                {
                    b.Property<int>("RefTLMGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TLMGroup")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TLMGroupCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTLMGroupId");

                    b.ToTable("RefTLMGroup");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTLMLanguage", b =>
                {
                    b.Property<int>("RefTLMLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TLMLanguage")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TLMLanguageCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTLMLanguageId");

                    b.ToTable("RefTLMLanguage");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTLMMaterialSet", b =>
                {
                    b.Property<int>("RefTLMMaterialSetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TLMMaterialSet")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TLMMaterialSetCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTLMMaterialSetId");

                    b.ToTable("RefTLMMaterialSet");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTLMMaterialType", b =>
                {
                    b.Property<int>("RefTLMMaterialTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TLMMaterialType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TLMMaterialTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTLMMaterialTypeId");

                    b.ToTable("RefTLMMaterialType");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTLMSubject", b =>
                {
                    b.Property<int>("RefTLMSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TLMSubject")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TLMSubjectCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTLMSubjectId");

                    b.ToTable("RefTLMSubject");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTeacherPosition", b =>
                {
                    b.Property<int>("RefTeacherPositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeacherPosition")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TeacherPositionCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTeacherPositionId");

                    b.ToTable("RefTeacherPosition");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefTeacherType", b =>
                {
                    b.Property<int>("RefTeacherTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeacherType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("TeacherTypeCode")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("RefTeacherTypeId");

                    b.ToTable("RefTeacherType");
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMDistribution", b =>
                {
                    b.Property<Guid>("TLMDistributionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid?>("OrganizationIdFrom");

                    b.Property<Guid?>("OrganizationIdTo");

                    b.Property<Guid?>("ParentTLMDistributionId");

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ReceivedDate");

                    b.Property<int?>("RefTLMDistributionStatusId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<DateTime?>("ShippedDate");

                    b.Property<int>("TLMDistributionPeriodId");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Url");

                    b.HasKey("TLMDistributionId");

                    b.HasIndex("OrganizationIdFrom");

                    b.HasIndex("OrganizationIdTo");

                    b.HasIndex("ParentTLMDistributionId");

                    b.HasIndex("RefTLMDistributionStatusId");

                    b.HasIndex("TLMDistributionPeriodId");

                    b.ToTable("TLMDistribution");
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMDistributionDetail", b =>
                {
                    b.Property<Guid>("TLMDistributionDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int?>("QuantityReceived");

                    b.Property<int>("QuantityShipped");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<Guid?>("TLMDistributionId");

                    b.Property<int>("TLMMaterialId");

                    b.HasKey("TLMDistributionDetailId");

                    b.HasIndex("TLMDistributionId");

                    b.HasIndex("TLMMaterialId");

                    b.ToTable("TLMDistributionDetail");
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMDistributionPeriod", b =>
                {
                    b.Property<int>("TLMDistributionPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Closed");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("TLMDistributionPeriodId");

                    b.ToTable("TLMDistributionPeriod");
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMMaterial", b =>
                {
                    b.Property<int>("TLMMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(384);

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int?>("RatioDenominator");

                    b.Property<int?>("RatioNumerator");

                    b.Property<int?>("RefGradeLevelId");

                    b.Property<int?>("RefTLMGroupId");

                    b.Property<int?>("RefTLMLanguageId");

                    b.Property<int?>("RefTLMMaterialSetId");

                    b.Property<int?>("RefTLMMaterialTypeId");

                    b.Property<int?>("RefTLMSubjectId");

                    b.Property<string>("TLMMaterialCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TLMMaterialName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Url");

                    b.HasKey("TLMMaterialId");

                    b.HasIndex("RefGradeLevelId");

                    b.HasIndex("RefTLMGroupId");

                    b.HasIndex("RefTLMLanguageId");

                    b.HasIndex("RefTLMMaterialSetId");

                    b.HasIndex("RefTLMMaterialTypeId");

                    b.HasIndex("RefTLMSubjectId");

                    b.ToTable("TLMMaterial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MEL.Entities.Core.EducationAdministrator", b =>
                {
                    b.HasOne("MEL.Entities.Core.Participant", "Participants")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefEducationAdministratorOffice", "EducationAdministratorOffices")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("RefEducationAdministratorOfficeId");

                    b.HasOne("MEL.Entities.Reference.RefEducationAdministratorPosition", "EducationAdministratorPositions")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("RefEducationAdministratorPositionId");

                    b.HasOne("MEL.Entities.Reference.RefEducationAdministratorType", "EducationAdministratorTypes")
                        .WithMany("EducationAdministrators")
                        .HasForeignKey("RefEducationAdministratorTypeId");
                });

            modelBuilder.Entity("MEL.Entities.Core.Organization", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "ParentOrganization")
                        .WithMany("Organizations")
                        .HasForeignKey("ParentOrganizationId");

                    b.HasOne("MEL.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Organizations")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEL.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Organizations")
                        .HasForeignKey("RefOrganizationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MEL.Entities.Core.Participant", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "Organizations")
                        .WithMany("Participants")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Participants")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEL.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("Participants")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefSex", "Sex")
                        .WithMany("Participants")
                        .HasForeignKey("RefSexId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MEL.Entities.Core.Partner", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefPartnerSector", "PartnerSectors")
                        .WithMany("Partners")
                        .HasForeignKey("RefPartnerSectorId");

                    b.HasOne("MEL.Entities.Reference.RefPartnerType", "PartnerTypes")
                        .WithMany("Partners")
                        .HasForeignKey("RefPartnerTypeId");
                });

            modelBuilder.Entity("MEL.Entities.Core.School", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "Organizations")
                        .WithMany("Schools")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Core.Partner", "Partners")
                        .WithMany("Schools")
                        .HasForeignKey("PartnerId");

                    b.HasOne("MEL.Entities.Reference.RefSchoolAdministrationType", "SchoolAdministrationTypes")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolAdministrationTypeId");

                    b.HasOne("MEL.Entities.Reference.RefSchoolCluster", "SchoolClusters")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolClusterId");

                    b.HasOne("MEL.Entities.Reference.RefSchoolLocation", "SchoolLocations")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolLocationId");

                    b.HasOne("MEL.Entities.Reference.RefSchoolStatus", "SchoolStatus")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolStatusId");

                    b.HasOne("MEL.Entities.Reference.RefSchoolType", "SchoolTypes")
                        .WithMany("Schools")
                        .HasForeignKey("RefSchoolTypeId");
                });

            modelBuilder.Entity("MEL.Entities.Core.SchoolEnrollment", b =>
                {
                    b.HasOne("MEL.Entities.Core.School", "Schools")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("MEL.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefSchoolGradeLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Core.SchoolPeriod", "SchoolPeriods")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("SchoolPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MEL.Entities.Core.Student", b =>
                {
                    b.HasOne("MEL.Entities.Core.Participant", "Participants")
                        .WithMany("Students")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefStudentDisabilityType", "DisabilityTypes")
                        .WithMany("Students")
                        .HasForeignKey("RefStudentDisabilityTypeId");

                    b.HasOne("MEL.Entities.Reference.RefStudentSpecialization", "StudentSpecializations")
                        .WithMany("Students")
                        .HasForeignKey("RefStudentSpecializationId");

                    b.HasOne("MEL.Entities.Reference.RefStudentType", "StudentTypes")
                        .WithMany("Students")
                        .HasForeignKey("RefStudentTypeId");
                });

            modelBuilder.Entity("MEL.Entities.Core.Teacher", b =>
                {
                    b.HasOne("MEL.Entities.Core.Participant", "Participants")
                        .WithMany("Teachers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefTeacherPosition", "TeacherPositions")
                        .WithMany("Teachers")
                        .HasForeignKey("RefTeacherPositionId");

                    b.HasOne("MEL.Entities.Reference.RefTeacherType", "TeacherTypes")
                        .WithMany("Teachers")
                        .HasForeignKey("RefTeacherTypeId");
                });

            modelBuilder.Entity("MEL.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "Organizations")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("MEL.Entities.Programs.Group", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "Organizations")
                        .WithMany("Groups")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Core.Teacher", "Teachers")
                        .WithMany("Groups")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("MEL.Entities.Programs.Program", "Programs")
                        .WithMany("Groups")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("Groups")
                        .HasForeignKey("RefGradeLevelId");
                });

            modelBuilder.Entity("MEL.Entities.Programs.GroupEnrollment", b =>
                {
                    b.HasOne("MEL.Entities.Programs.Group", "Groups")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("GroupId");

                    b.HasOne("MEL.Entities.Core.Participant", "Participants")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefEnrollmentStatus", "EnrollmentStatus")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("RefEnrollmentStatusId");
                });

            modelBuilder.Entity("MEL.Entities.Programs.GroupEvaluation", b =>
                {
                    b.HasOne("MEL.Entities.Programs.GroupEnrollment", "GroupEnrollments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("GroupEnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Programs.ProgramAssessment", "ProgramAssessments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("ProgramAssessmentId");

                    b.HasOne("MEL.Entities.Reference.RefEvaluationStatus", "EvaluationStatus")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("RefEvaluationStatusId");
                });

            modelBuilder.Entity("MEL.Entities.Programs.Program", b =>
                {
                    b.HasOne("MEL.Entities.Reference.RefAttendanceUnit", "AttendanceUnits")
                        .WithMany("Programs")
                        .HasForeignKey("RefAttendanceUnitId");

                    b.HasOne("MEL.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.HasOne("MEL.Entities.Reference.RefProgramType", "ProgramTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefProgramTypeId");
                });

            modelBuilder.Entity("MEL.Entities.Programs.ProgramAssessment", b =>
                {
                    b.HasOne("MEL.Entities.Programs.Program", "Programs")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefAssessmentType", "AssessmentTypes")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("RefAssessmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Reference.RefAttendanceUnit", "AttendanceUnits")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("RefAttendanceUnitId");

                    b.HasOne("MEL.Entities.Reference.RefEvaluationStatus", "EvaluationStatus")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("RefEvaluationStatusId");
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefLocation", b =>
                {
                    b.HasOne("MEL.Entities.Reference.RefLocation", "ParentLocations")
                        .WithMany("Locations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("MEL.Entities.Reference.RefLocationType", "LocationTypes")
                        .WithMany("Locations")
                        .HasForeignKey("RefLocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MEL.Entities.Reference.RefSchoolCluster", b =>
                {
                    b.HasOne("MEL.Entities.Reference.RefLocation", "Locations")
                        .WithMany("SchoolClusters")
                        .HasForeignKey("RefLocationId");
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMDistribution", b =>
                {
                    b.HasOne("MEL.Entities.Core.Organization", "OrganizationsFrom")
                        .WithMany("TLMDistributionsFrom")
                        .HasForeignKey("OrganizationIdFrom");

                    b.HasOne("MEL.Entities.Core.Organization", "OrganizationsTo")
                        .WithMany("TLMDistributionsTo")
                        .HasForeignKey("OrganizationIdTo");

                    b.HasOne("MEL.Entities.TLM.TLMDistribution", "ParentTLMDistributions")
                        .WithMany("TLMDistributions")
                        .HasForeignKey("ParentTLMDistributionId");

                    b.HasOne("MEL.Entities.Reference.RefTLMDistributionStatus", "DistributionStatus")
                        .WithMany("TLMDistributions")
                        .HasForeignKey("RefTLMDistributionStatusId");

                    b.HasOne("MEL.Entities.TLM.TLMDistributionPeriod", "TLMDistributionPeriods")
                        .WithMany("TLMDistributions")
                        .HasForeignKey("TLMDistributionPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMDistributionDetail", b =>
                {
                    b.HasOne("MEL.Entities.TLM.TLMDistribution", "TLMDistributions")
                        .WithMany("TLMDistributionDetails")
                        .HasForeignKey("TLMDistributionId");

                    b.HasOne("MEL.Entities.TLM.TLMMaterial", "TLMMaterials")
                        .WithMany("TLMDistributionDetails")
                        .HasForeignKey("TLMMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MEL.Entities.TLM.TLMMaterial", b =>
                {
                    b.HasOne("MEL.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefGradeLevelId");

                    b.HasOne("MEL.Entities.Reference.RefTLMGroup", "TLMGroups")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMGroupId");

                    b.HasOne("MEL.Entities.Reference.RefTLMLanguage", "TLMLanguages")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMLanguageId");

                    b.HasOne("MEL.Entities.Reference.RefTLMMaterialSet", "TLMMaterialSets")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMMaterialSetId");

                    b.HasOne("MEL.Entities.Reference.RefTLMMaterialType", "TLMMaterialTypes")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMMaterialTypeId");

                    b.HasOne("MEL.Entities.Reference.RefTLMSubject", "TLMSubjects")
                        .WithMany("TLMMaterials")
                        .HasForeignKey("RefTLMSubjectId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MEL.Entities.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MEL.Entities.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MEL.Entities.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MEL.Entities.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MEL.Entities.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MEL.Entities.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
